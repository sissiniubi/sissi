#include <iostream> 
#include <stack>
#include <string> 
#include <math.h>

using namespace std ; 
int is_symbol(char Equation) // 对运算符进行判断的函数 
{
	if (!isalnum(Equation) && (  // 只识别合法运算符+ - * / # 
	Equation == '+' || 
	Equation == '-' || 
	Equation == '*' || 
	Equation == '/' ||
	Equation == '#'
	))
	{return 1;} // 是合法运算符就返回1，代表TRUE 
	return 0; // 非合法运算符就返回0，代表FALSE 
}
int jiancha (string str) // 初步检查中序输入是否正确 
{
	int maohao=0 ; int xiaoshu=0 ; int fushu=0 ; int fuhao=0 ; int dig=0 ; int jisuan=0 ; int digx;
	for (int k=0 ; k < str.length() ; k++)
	{ 
		if (maohao == 2) // 每两个冒号之间正常情况下应只有一个合法数字，对该数字的操作在两个冒号后都应当被初始化，同时对两冒号之间的数字判断是否合法 
		{
			if (fushu!=1 && fushu!=0) // 判断单目负是否出现重复使用 
			{
				cout << endl << "0单目负（#）输入有误，请退出程序重新输入" << endl ;
				return 0 ;
			} 
			if (xiaoshu == 1 && digx == dig) // 判断是否出现小数点后无数字的情况 
			{
				cout << endl << "0小数点输入错误，请退出程序重新输入" << endl ;
				return 0 ;
			}
			maohao = 0 ;    //***************************************** 
			xiaoshu = 0 ;   //*
			fushu = 0 ;		//*  对过程中判断数字变量计数器进行初始化 
			fuhao = 0 ;		//*
			dig  = 0 ;		//***************************************** 
		}
		if (maohao == 0 && jisuan > 1) // 判断是否出现两个合法运算符连续输入 
		{
			cout << endl << "符号输入错误，请退出程序重新输入" ;
			return 0 ; 
		}
		if (maohao == 1) // 进入数字后，初始化运算符计数器 
		{
			jisuan = 0 ;
		}
		if (xiaoshu > 1) // 判断一个数字内的小数点数量是否有错误 
		{
			cout << endl << "1小数点输入错误，请退出程序重新输入" << endl ;
			return 0 ;
		}
		if(str[k] == ':' ) // 如果该位是冒号 
		{
			maohao = maohao + 1 ; // 对么冒号进行计数 
			if (maohao == 1 && !isdigit(str[k+1]) && !is_symbol(str[k+1]) || str[k+1] == ':') // 中序输入不应该出现冒号后不跟数字，运算符或两个冒号连续出现的情况 
			{
				cout<<endl<<"输入错了，请退出程序重新输入" ;
				return 0 ;
			}
		}
		else if(isdigit(str[k])) // 如果该位是数字 
		{
			dig ++ ;  // 对数字计数器更新 
			if(maohao != 1 ) // 由于数字必须由冒号括起来，因此有数字出现在双冒号外则应报错  
			{
				cout << endl << "1被计算数字输入有误，请退出程序重新输入" << endl ;
				return 0 ;
			}
		}
		else if (str[k] == '.') // 如果该位是小数点 
		{
			if (maohao == 1 && xiaoshu==0 && dig != 0) // 如果在数字内部，且之前未出现过小数点，又有数字在前 
			{
				xiaoshu = 1 ; // 对小数点计数器改变值 
				digx = dig ; //  记录小数点前数字数目 
			}
			else
			{
				cout << endl << "1小数点输入有误，请退出程序重新输入" << endl ;
				return 0 ;
			}
		} 
		else if (is_symbol(str[k]) )// 如果是合法运算符 
		{
			jisuan ++ ; // 运算符计数器更新 
			if (maohao%2 == 1 && str[k]!='#') // 如果过程出现有一个冒号在运算符之前没有配对的情况 ，且该运算符不是单目负 
			{
				cout << endl << "1冒号个数不对，请退出程序重新输入" ;
				return 0 ;
			}
			if (str[k] == '#') // 如果该运算符是单目负 
			{
				if(maohao == 1 && fushu == 0) // 如果在数字内部，且之前没有单目负出现过 
				{
					fushu = 1 ; // 对单目负计数器更新 
				}
				else 
				{
					cout << endl << "1单目负（#）输入有误，请退出程序重新输入" << endl ;
					return 0 ;
				} 
			}
		}
		if (str[k] == '(' && str[k+1]!=':' && str[k+1]!='(')
		{
			cout<<endl<<"输入错了，请退出程序重新输入" ;
			return 0 ; 
		}
	}
	if (jisuan > dig) // 全部识别完以上程序后应所有内容都被归零，如果出现运算符大于数字的现象则会报错 
	{
		cout<<endl<<"输入错了，请退出程序重新输入" ;
		return 0 ; 
	}
	return 1 ;
}

int is_niubi (char n) // 检测运算符号优先级 
{
	if (n == '*' || n == '/' )
	{
		return 2 ;
	}
	else if (n == '+' || n == '-')
	{
		return 1 ;
	}
	else if (n == '(') // 在压栈时忽略左括号 
	{
		return 0 ;
	}
}

int main ( ) 
{
	char Equation;
	int ii=0;
	double temp1=0;
	int a=10;double b=1;double c=0;int cifang = 1 ;
	string str ;
	int tem=0 ;
	int null ;
	stack <char> op ; 	//规定一个栈oprt为字符栈， 一个字符数组记录后续输出
	string end_out ;
	int j=0 , i=0 ;
	stack <double> opnum ;
	int maohao=0 ; int xiaoshu=0 ; int fushu=0 ; int fuhao=0 ; int dig=0 ;
	cout << "请输入需计算算式，每个数字之间以:隔开，形如:#12.4:，可进行+-*/单目负计算"  ;
	cin >> str ; // str 为输入的中序表达式 
	if (!jiancha(str)) // 检查中序输入有误则报错 
	{
		return 0 ;
	}
	for (i ; i<str.length() ; i++)//从左到右扫描中缀表达式
	{
		if (str[i] == '+' || str[i] == '-' || str[i] == '*' || str[i] == '/'||str[i] == '('|| str[i] == ')')//如果当前字符串不是运算符号有两条路（）或数字 
		{
			if (str[i] == '+' || str[i] == '-' || str[i] == '*' || str[i] == '/') //判断当前符号与栈顶符号优先级
			{
				if( op.empty()) 
				{
					op.push(str[i]) ; 
				}
				else
				{
						while (is_niubi(op.top()) >= is_niubi(str[i]))  // 退出栈顶元素，直到当前元素优先级大于栈顶元素或栈为空，当前元素入栈 
						{
							end_out[j] = op.top() ;
							op.pop() ;
							j++ ;
							if( op.empty()) 
							{
								op.push(str[i]) ;
								break ; 
							}
							if (is_niubi(op.top()) < is_niubi(str[i]) && op.top() != '(')
							{
								op.push(str[i]) ;
								break ;
							}	
						}
						if (is_niubi(op.top()) < is_niubi(str[i]) && op.top() != '(')
						{
							op.push(str[i]) ;
						}
						if (op.top() == '(')
						{
							op.push(str[i]) ;
						} 		  
				}
		} 
		else if(str[i] == '(' ) // 出现左括号就直接压栈 
		{
			op.push(str[i]) ;
		} 
		else if(str[i] == ')') // 出现右括号 
		{
			while(1)
			{
				if(op.top() != '(' ) // 当栈顶元素不是左括号 
				{
					end_out[j] = op.top() ; // 就不断弹出栈顶元素， 并赋值给后序输出字符串 
					op.pop() ;
					j ++ ;
				}
				else if (op.top() == '(') // 出现左括号就直接弹出 
				{
					op.pop() ;
					break ;
				}
					
			}
		}
		}
		else if (str[i] == '\n') // 若果当前字符为空格，则不做任何计算做一次无意义操作 
		{
			null = 0 ;
		}
		else // 对除以上加减乘除括号之外的字符全部输出 
		{
			end_out[j] = str[i] ;
			j ++ ;
		}
	}
	while (!op.empty() ) // 不断将运算符出栈，直到栈空 
	{
		end_out[j] = op.top() ;
		op.pop() ;
		j++ ;
	}
	cout << "后序输出为：" ; // 输出后序表达式 
	for (int k=0 ; k<j ; k++)
	{
		cout << end_out[k];
	}
	for (int k=0 ; k < j ; k++) // 后序表达式进行计算 ， 同时在此判断形式是否正确 
	{
		if (maohao == 2) // 每两个冒号之间为一个数字 
		{
			if (fushu == 1) // 单目负计数器为1，则对该数字取负值 
			{
				opnum.push(0-c) ;
			}
			else if (fuhao == 0) // 单目负计数器为0，则对该数字取原值
			{
				opnum.push(c) ; 
			}
			else // 其他情况报错 
			{
				cout << endl << "单目负（#）输入有误，请退出程序重新输入" << endl ;
				return 0 ;
			} 
			maohao = 0 ;	//******************************************** 
			xiaoshu = 0 ;	
			c = 0 ;
			a = 10 ;
			b = 1 ;			//   这几步对数字中一些变量的计数器初始化 
			fushu = 0 ;
			fuhao = 0 ;
			cifang = 1 ;
			dig  = 0 ;		//******************************************** 
		}
		if(maohao > 2) // 如果出现多余两个冒号还未初始化的情况 
		{
			cout << endl <<  "：输入错误，请退出程序重新输入" << endl ;
			return 0 ;			 
		}
		if (xiaoshu > 1) // 如果出现多余两个小数点而没有初始化的情况，也就是一个数字中有多个小数点 
		{
			cout << endl << "小数点输入错误，请退出程序重新输入" << endl ;
			return 0 ;
		}
		if(end_out[k] == ':' ) // 如果该位是冒号 
		{
			maohao = maohao + 1 ; // 对冒号计数器更新 
		}
		else if(isdigit(end_out[k])) // 如果该位是数字 
		{
			dig ++ ;  // 对数字计数器进行更新 
			if(maohao == 1 && xiaoshu == 0) // 如果此前没有小数点 
			{
				c = c*a + (end_out[k] - '0') * b ; // 把之前的数字*10，该位数字*1，相加 
			}
			else if (maohao == 1 && xiaoshu == 1) // 如果此前有小数点
			{
				for (int lll=1 ; lll<cifang ; lll++) // 对于小数点后的每一位对给小数点后计数器b乘以0.1 
				{
					b*=b ;
				}
				c = c + (end_out[k] - '0') * (b) ; // 把之前的数字和该位数字*b（小数点后位数计数器），相加
				cifang ++ ;  
			}
			else //检验输入是否正确 
			{
				cout << endl << "被计算数字输入有误，请退出程序重新输入" << endl ;
				return 0 ;
			}
		}
		else if (end_out[k] == '.') // 如果该位是小数点 
		{
			if (maohao == 1 && xiaoshu==0 && dig != 0) // 在一个数字里面，之前没有小数点出现且有数字的情况下 
			{
				a = 1 ; // 对小数点前计数器进行初始化 
				b = 0.1; // 对小数点后计数器进行初始化 
				xiaoshu = 1 ; // 对小数点计数器进行更新 
			}
			else
			{
				cout << endl << "小数点输入有误，请退出程序重新输入" << endl ;
				return 0 ;
			}
		}//如果是数字，就通过字符改变为数字，然后放入数字栈。（#数字直接变成0-的结果计入数字栈） 
		else if (is_symbol(end_out[k]) )// 如果是加减乘除，就从数字栈中出两个数字进行对应运算，算完后再压回栈
		{
			if (maohao%2 == 1 && end_out[k]!='#') // 如果过程出现有一个冒号在运算符之前没有配对的情况 ，且该运算符不是单目负
			{
				cout << endl << "冒号个数不对，请退出程序重新输入" ;
				return 0 ;
			}
			if (end_out[k] == '+') // 如果是加，就从数字栈中出两个数字进行+运算，算完后再压回栈
			{ 
				double n = opnum.top() ;
				opnum.pop() ;
				double o = opnum.top() ;
				opnum.pop() ;
				double count = o+n ;
				opnum.push(count) ;  
			}
			else if (end_out[k] == '-')// 如果是减，就从数字栈中出两个数字进行-运算，算完后再压回栈
			{
				double n = opnum.top() ;
				opnum.pop() ;
				double o = opnum.top() ;
				opnum.pop() ;
				double count = o-n ;
				opnum.push(count) ;
			}
			else if (end_out[k] == '*')// 如果是乘，就从数字栈中出两个数字进行*运算，算完后再压回栈
			{
				double n = opnum.top() ;
				opnum.pop() ;
				double o = opnum.top() ;
				opnum.pop() ;
				double count = o * n ;
				opnum.push(count) ;
			}
			else if (end_out[k] == '/' )// 如果是除，就从数字栈中出两个数字进行/运算，算完后再压回栈
			{
				double n = opnum.top() ;
				opnum.pop() ;
				double o = opnum.top() ;
				opnum.pop() ;
				double count = o / n ;
				opnum.push(count) ;
			}
			else if (end_out[k] == '#')// 如果是单目负
			{
				if(maohao == 1 && fushu == 0) // 如果在一个数字中，且之前没有出现过单目负 
				{
					fushu = 1 ; // 更新单目负计数器 
				}
				else 
				{
					cout << endl << "单目负（#）输入有误，请退出程序重新输入" << endl ;
					return 0 ;
				} 
			}
			else // 对以上不是加减乘除单目负之外的符号全部报错 
			{
				cout << endl << "计算符号输入有误，请退出程序重新输入" << endl ;
				return 0 ;
			}
		}
		else // 对以上不是数字加减乘除小数点冒号单目负之外的符号全部报错
		{
			cout << endl << "第" << k << "位输入有误，请退出程序重新输入" << endl ;
			return 0 ; 
		}
	}
	cout <<  endl << "答案是:" << opnum.top()  ; //直到输入的string数组全部读完，如果数字栈中只有一个元素，则返回数字栈中的元素 ，否则返回输入有误 
	return 0 ; 	
}
