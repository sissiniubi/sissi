#include <iostream> 
#include <stack>
#include <map>
#include <string> 

using namespace std ;

int is_niubi (string n) // 检测运算符号优先级 
{
	if (n == "*" || n == "/" )
	{
		return 2 ;
	}
	else if (n == "+" || n == "-")
	{
		return 1 ;
	}
}

int main ( ) // str 为输入的中序表达式 
{
	string str[5] = {"1","+","2","+","3"} ; 
	//规定一个栈oprt为字符栈， 一个字符数组记录后续输出
	stack <string> op ; 
	string end_out [10000] ;
	int j=0 ;
	//从左到右扫描中缀表达式
	for(int i=0 ; i<5 ; i++)
	{
		//如果当前字符串不是运算符号有两条路（）或数字 
		if (str[i] != "+" || str[i] != "-" || str[i] != "*" || str[i] != "/") 
		{
			if(str[i] == "(" )
			{
				op.push(str[i]) ;
			} 
			else if(str[i] == ")")
			{
				while(1)
				{
					if(op.top() != "(" )
					{
						end_out[j] = op.top() ;
						op.pop() ;
						j ++ ;
					}
					else if (op.top() == "(")
					{
						op.pop() ;
						break ;
					}
					
				}
			}
			else
			{
				end_out[j] = str[i] ;
				j ++ ;
			}
		}
		else if (str[i] == "+" || str[i] == "-" || str[i] == "*" || str[i] == "/")
		{
			//判断当前符号与栈顶符号优先级
			if (is_niubi(op.top()) < is_niubi(str[i]) && !op.empty()) 
			{
				op.push(str[i]) ; 
			}
			else if (op.empty())
			{
				op.push(str[i]) ;
			}
			else if (is_niubi(op.top()) >= is_niubi(str[i])) // 退出栈顶元素，当前元素入栈 
			{
				end_out[j] = op.top() ;
				op.pop() ;
				j++ ;
				op.push(str[i]) ;  
			}
		}
	}
	for (int k=0 ; k < 5 ; k++)
	{
		cout << end_out[k] << " " ; 
	}
	return 0 ; 
	
}
